rm(list = ls())
library("quantmod")
library("quantmod")
library("quantmod-package")
rm(list = ls())
library(quantmod)
library("quantmod")
library("quantmod")
install.packages("quantmod")
library("quantmod")
library("quantmod")
options("getSymbols.warning4.0"=FALSE)
cav("\f")
cat("\f")
getSymbols("GOOG", scr="yahoo", from="2011-01-03", to="2014-12-31")
google_close<-GOOG$GOOG.Close
View(google_close)
View(google_close)
mean(google_close)
sd(google_close)
skewness(google_close)
library("moments")
skewness(google_close)
kurtosis(google_close)
minimum(google_close)
min(google_close)
max(google_close)
hist(google_close)
density(google_close)
plot(density(google_close))
hist(google_close)
plot(density(google_close))
hist(google_close)
plot(density(google_close))
hist(google_close)
plot(density(google_close))
hist(google_close)
shapiro.test(google_close)
# Empezamos calculando el rendimiento neto diario de Google
function_google_net_returns=diff(google_close)/lag(google_close)
vector_google_net_returns=as.numeric(function_google_net_returns) # creamos un vector donde guardamos el rendimiento neto
google_net_returns=head(na.omit(vector_google_net_returns), n=length(function_google_net_returns)) # omitimos los NA
# Empecemos calculando los parámetros que nos piden por Google
mean(google_net_returns) # media
sd(google_net_returns) # desviación estándar
skewness(google_net_returns) # asimetría
kurtosis(google_net_returns) # exceso de cortosis
min(google_net_returns) # mínimo
max(google_net_returns) # máximo
# Calculamos estos mismos parámetros por SP
mean(SP_net_returns) # media
# Para obtener la función de densidad de forma empírica del rendimiento neto de las acciones de Google, haremos un plot
# de la densidad de ésta
density_function=density(google_net_returns)
plot(density_function, main="Empirical density function of the net returns of Google stock",
cex.main =0.95, xlab="Net returns of Google stock", ylab="Relative frequency", cex.lab = 0.6)
# Para ver si los datos siguen una distribución normal realizamos la prueba de normalidad de Shapiro-Wilk, por lo que
# supondremos que la variable presenta una distribución normal y refutaremos o aceptaremos ésta a partir del p-valor obtenido.
# Si el p-valor<0.005 refutamos la hipótesis, si el p-valor>0.005 lo aceptamos
shapiro.test(google_net_returns)
library("moments")
rm(list = ls())
#install.packages("quantmod")
library("quantmod")
library("moments")
options("getSymbols.warning4.0"=FALSE)
cat("\f")
getSymbols("GOOG", scr="yahoo", from="2011-01-03", to="2014-12-31")
google_close<-GOOG$GOOG.Close
google_close
plot(google_close)
google_net_returns<-diff(google_close)/lag(google_close)
google_net_returns
plot(google_net_returns)
google_log_returns<-log(1+google_net_returns)
plot(google_log_returns)
plot(google_net_returns)
plot(google_log_returns)
google_log_returns<-log(1+google_net_returns)
plot(google_log_returns)
google_close<-GOOG$GOOG.Close
plot(google_close)
google_net_returns<-diff(google_close)/lag(google_close)
google_net_returns
plot(google_net_returns)
google_log_returns<-log(1+google_net_returns)
plot(google_log_returns)
# Apartat A
mean(google_net_returns)
google_net_returns
plot(google_net_returns)
google_log_returns<-log(1+google_net_returns)
plot(google_log_returns)
# Apartat A
mean(google_net_returns)
sd(google_net_returns)
plot(google_close)
google_net_returns<-diff(google_close)/lag(google_close)
google_net_returns
plot(google_net_returns)
google_net_returns
google_close<-GOOG$GOOG.Close
plot(google_close)
google_net_returns<-diff(google_close)/lag(google_close)
google_net_returns
plot(google_net_returns)
google_log_returns<-log(1+google_net_returns)
plot(google_log_returns)
# Apartat A
mean(google_net_returns$GOOG.Close)
# Apartat A
mean(google_net_returns)
function_google_net_returns=diff(google_close)/lag(google_close)
vector_google_net_returns=as.numeric(function_google_net_returns) # creamos un vector donde guardamos el rendimiento neto
google_net_returns=head(na.omit(vector_google_net_returns), n=length(function_google_net_returns)) # omitimos los NA
google_net_returns<-diff(google_close)/lag(google_close)
google_net_returns
plot(google_net_returns)
google_log_returns<-log(1+google_net_returns)
plot(google_log_returns)
# Apartat A
mean(google_net_returns)
rm(list = ls())
#install.packages("quantmod")
library("quantmod")
library("moments")
options("getSymbols.warning4.0"=FALSE)
cat("\f")
getSymbols("GOOG", scr="yahoo", from="2011-01-03", to="2014-12-31")
function_google_net_returns=diff(google_close)/lag(google_close)
vector_google_net_returns=as.numeric(function_google_net_returns) # creamos un vector donde guardamos el rendimiento neto
google_net_returns=head(na.omit(vector_google_net_returns), n=length(function_google_net_returns)) # omitimos los NA
google_net_returns=head(na.omit(vector_google_net_returns), n=length(function_google_net_returns)) # omitimos los NA
function_google_net_returns=diff(google_close)/lag(google_close)
vector_google_net_returns=as.numeric(function_google_net_returns) # creamos un vector donde guardamos el rendimiento neto
google_net_returns=head(na.omit(vector_google_net_returns), n=length(function_google_net_returns)) # omitimos los NA
google_close<-GOOG$GOOG.Close
rm(list = ls())
#install.packages("quantmod")
library("quantmod")
library("moments")
options("getSymbols.warning4.0"=FALSE)
cat("\f")
getSymbols("GOOG", scr="yahoo", from="2011-01-03", to="2014-12-31")
google_close<-GOOG$GOOG.Close
function_google_net_returns=diff(google_close)/lag(google_close)
vector_google_net_returns=as.numeric(function_google_net_returns) # creamos un vector donde guardamos el rendimiento neto
google_net_returns=head(na.omit(vector_google_net_returns), n=length(function_google_net_returns)) # omitimos los NA
google_net_returns
plot(google_net_returns)
google_log_returns<-log(1+google_net_returns)
plot(google_log_returns)
# Apartat A
mean(google_net_returns)
sd(google_net_returns)
# Apartat A
mean(google_net_returns) # media
sd(google_net_returns) # desviación estándar
skewness(google_net_returns) # asimetría
kurtosis(google_net_returns) # exceso de cortosis
min(google_net_returns) # mínimo
max(google_net_returns) # máximo
# Apartat B
density(google_net_returns)
# Apartat B
d<-density(google_net_returns)
plot(d)
length(google_net_returns)
# Apartat C
shapiro.test(google_net_returns)
# Apartat D
google_log_returns<-log(1+google_net_returns)
google_log_returns
plot(google_log_returns)
mean(google_log_returns)
sd(google_log_returns)
skewness(google_log_returns)
kurtosis(google_log_returns)
min(google_log_returns)
max(google_log_returns)
# Apartat E
t.test(google_log_returns)
plot(d)
# Apartat E
density(google_log_returns)
# Apartat E
dl<-density(google_log_returns)
plot(dl)
shapiro.test(dl)
shapiro.test(google_log_returns)
# Apartat D
t.test(google_log_returns)
shapiro.test(google_log_returns)
# Apartat F
t.test(google_log_returns)
# Apartat F
t.test(google_log_returns)$conf.int
